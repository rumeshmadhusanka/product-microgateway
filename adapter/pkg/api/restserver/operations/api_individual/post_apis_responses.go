// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/wso2/micro-gw/pkg/api/models"
)

// PostApisOKCode is the HTTP code returned for type PostApisOK
const PostApisOKCode int = 200

/*PostApisOK Created.
API Imported Successfully.


swagger:response postApisOK
*/
type PostApisOK struct {
}

// NewPostApisOK creates PostApisOK with default headers values
func NewPostApisOK() *PostApisOK {

	return &PostApisOK{}
}

// WriteResponse to the client
func (o *PostApisOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostApisForbiddenCode is the HTTP code returned for type PostApisForbidden
const PostApisForbiddenCode int = 403

/*PostApisForbidden Forbidden
Not Authorized to import.


swagger:response postApisForbidden
*/
type PostApisForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostApisForbidden creates PostApisForbidden with default headers values
func NewPostApisForbidden() *PostApisForbidden {

	return &PostApisForbidden{}
}

// WithPayload adds the payload to the post apis forbidden response
func (o *PostApisForbidden) WithPayload(payload *models.Error) *PostApisForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post apis forbidden response
func (o *PostApisForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApisForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostApisNotFoundCode is the HTTP code returned for type PostApisNotFound
const PostApisNotFoundCode int = 404

/*PostApisNotFound Not Found.
Requested API to update not found.


swagger:response postApisNotFound
*/
type PostApisNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostApisNotFound creates PostApisNotFound with default headers values
func NewPostApisNotFound() *PostApisNotFound {

	return &PostApisNotFound{}
}

// WithPayload adds the payload to the post apis not found response
func (o *PostApisNotFound) WithPayload(payload *models.Error) *PostApisNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post apis not found response
func (o *PostApisNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApisNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostApisConflictCode is the HTTP code returned for type PostApisConflict
const PostApisConflictCode int = 409

/*PostApisConflict Conflict.
API to import already exists.


swagger:response postApisConflict
*/
type PostApisConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostApisConflict creates PostApisConflict with default headers values
func NewPostApisConflict() *PostApisConflict {

	return &PostApisConflict{}
}

// WithPayload adds the payload to the post apis conflict response
func (o *PostApisConflict) WithPayload(payload *models.Error) *PostApisConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post apis conflict response
func (o *PostApisConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApisConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostApisInternalServerErrorCode is the HTTP code returned for type PostApisInternalServerError
const PostApisInternalServerErrorCode int = 500

/*PostApisInternalServerError Internal Server Error.
Error in importing API.


swagger:response postApisInternalServerError
*/
type PostApisInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostApisInternalServerError creates PostApisInternalServerError with default headers values
func NewPostApisInternalServerError() *PostApisInternalServerError {

	return &PostApisInternalServerError{}
}

// WithPayload adds the payload to the post apis internal server error response
func (o *PostApisInternalServerError) WithPayload(payload *models.Error) *PostApisInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post apis internal server error response
func (o *PostApisInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApisInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
